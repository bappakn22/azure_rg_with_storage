

trigger: none


pool:
  name: infra_agentpool

stages:
  - stage: terraform_install
    displayName: terraform app installation
    jobs:
      - job: terraform_application_install
        steps:
          - task: TerraformInstaller@1
            displayName: terraform install execute
            inputs:
              terraformVersion: 'latest'
    
          - task: TerraformTask@5
            displayName: "terraform init execute"
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)\environment'
              backendServiceArm: 'infra-azure-connection'
              backendAzureRmResourceGroupName: 'bappa_state_rg'
              backendAzureRmStorageAccountName: 'bappastatestorage'
              backendAzureRmContainerName: 'statecontainer'
              backendAzureRmKey: 'azure_basic.tfstate'

          - task: TerraformTask@5
            displayName: "terraform code validation"
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)\environment'

  - stage: terraform_plan
    jobs:
      - job: terraform_plan_execute
        steps:
          - task: TerraformInstaller@1
            displayName: "terraform install execute"
            inputs:
              terraformVersion: 'latest'
    
          - task: TerraformTask@5
            displayName: "terraform init execute"
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)\environment'
              backendServiceArm: 'infra-azure-connection'
              backendAzureRmResourceGroupName: 'bappa_state_rg'
              backendAzureRmStorageAccountName: 'bappastatestorage'
              backendAzureRmContainerName: 'statecontainer'
              backendAzureRmKey: 'azure_basic.tfstate'

          - task: TerraformTask@5
            displayName: "terraform plan" 
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)\environment'
              environmentServiceNameAzureRM: 'infra-azure-connection'

  - stage: terraform_security_check
    jobs:
      - job: terraform_code_security_check
        steps:
          
          - task: PowerShell@2
            displayName: "checkov execute"
            inputs:
              targetType: 'inline'
              script: 'checkov -d $(System.DefaultWorkingDirectory) --output junitxml > securityresult.xml'

          - task: PublishTestResults@2
            displayName: "scanning report"
            condition: always ()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'securityresult.xml'

          - task: PowerShell@2
            displayName: "tflint execute"
            condition: always ()
            inputs: 
              targetType: 'inline' 
              script: 'tflint --chdir="$(System.DefaultWorkingDirectory)\environment" --recursive --format junit | Out-File -Encoding utf8 tflintresult.xml'

          - task: PublishTestResults@2
            displayName: "tflint report"
            condition: always ()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'tflintresult.xml'

  - stage: manual_validation
    dependsOn: terraform_security_check
    displayName: validation approval
    condition: always ()
    jobs:
      - job: validate_by_manual
        steps:
        - task: ManualValidation@1
          displayName: "validate by manual"
          
          inputs:
            notifyUsers: 'bappakn22@gmail.com'
            approvers: 'bappakn22@gmail.com'
            instructions: 'please approve'

    pool: server

  - stage: terraform_apply
    displayName: "tf apply"
    dependsOn: manual_validation
    condition: always ()
    jobs:
      - job: terraformapplywillexecute
        steps:
          
          - task: TerraformInstaller@1
            displayName: "terraform install execute"
            inputs:
              terraformVersion: 'latest'
    
          - task: TerraformTask@5
            displayName: "terraform init execute"
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)\environment'
              backendServiceArm: 'infra-azure-connection'
              backendAzureRmResourceGroupName: 'bappa_state_rg'
              backendAzureRmStorageAccountName: 'bappastatestorage'
              backendAzureRmContainerName: 'statecontainer'
              backendAzureRmKey: 'azure_basic.tfstate'

          - task: TerraformTask@5
            displayName: apply execute
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)\environment'
              environmentServiceNameAzureRM: 'infra-azure-connection'